/*
 * KeyValidationDialog.java
 *
 * Created on August 31, 2009, 3:29 PM
 */

package swordfish.view;

import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import org.jdesktop.application.Action;

/**
 * The key validator takes the key the user typed in, and sends it to the server for
 * valildation.  If the key is valid, it will hide and the user can start playing,
 * otherwise it will request a new key
 * @author  jdavidso
 */
public class KeyValidationDialog extends javax.swing.JDialog {

    private SwordfishView view;
    private String key, ip = "127.0.0.1";
    private int port = 9000;
    
    /** Creates new form KeyValidationDialog
     * @param parent Parent frame
     * @param modal True for modal
     * @param view View to communicate to
     */
    public KeyValidationDialog(java.awt.Frame parent, SwordfishView view, boolean modal) {
        super(parent, modal);
        this.setAlwaysOnTop(true);
        this.view = view;
        initComponents();        
        keyTextField.addFocusListener(new FocusListener(){

            /**
             * Select all from the keyTextField on focus gained
             */
            public void focusGained(FocusEvent arg0) {                
                keyTextField.selectAll();
            }

            /**
             * Do nothing on focus lost
             */
            public void focusLost(FocusEvent arg0) {                
            }
        }
    );
    }
    
    /** Creates new form KeyValidationDialog
     * @param parent  Parent Frame
     * @param view view to connect to
     * @param ip ip address of the server
     * @param modal true for modal
     * @param port  port of the room
     */
    public KeyValidationDialog(java.awt.Frame parent, SwordfishView view, boolean modal, String ip, int port) {
        super(parent, modal);
        this.setAlwaysOnTop(true);
        this.view = view;
        initComponents();        
        this.ip = ip;
        this.port = port;
        keyTextField.addFocusListener(new FocusListener(){

            /**
             * Select all from the keyTextField on focus gained
             */
            public void focusGained(FocusEvent arg0) {                
                keyTextField.selectAll();
            }

            /**
             * Do nothing on focus lost
             */
            public void focusLost(FocusEvent arg0) {                
            }
        }
    );
    }
    
    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        keyTextField = new javax.swing.JTextField();
        okButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(swordfish.view.SwordfishApp.class).getContext().getResourceMap(KeyValidationDialog.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setAlwaysOnTop(true);
        setMinimumSize(new java.awt.Dimension(300, 100));
        setModal(true);
        setName("Form"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        keyTextField.setText(resourceMap.getString("keyTextField.text")); // NOI18N
        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(swordfish.view.SwordfishApp.class).getContext().getActionMap(KeyValidationDialog.class, this);
        keyTextField.setAction(actionMap.get("validateKey")); // NOI18N
        keyTextField.setName("keyTextField"); // NOI18N

        okButton.setAction(actionMap.get("validateKey")); // NOI18N
        okButton.setText(resourceMap.getString("okButton.text")); // NOI18N
        okButton.setName("okButton"); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(keyTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                .add(18, 18, 18)
                .add(okButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(okButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(keyTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Connect on close
     * @param evt
     */
private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
    this.setVisible(false);   
    view.connect();
}//GEN-LAST:event_formWindowClosed


    /**
     * Connect to the poker server with the given key.  If the key is valid, the
     * GUI will hide the validator, otherwise it will reset it and ask the user to 
     * try again
     */
    @Action
    public void validateKey() {
        key = keyTextField.getText();
        keyTextField.setText("Validating Key...");
        okButton.setEnabled(false);
        view.connectToServer(ip,port,key);        
    }
    
    /**
     * Reset the key textField and the okButton
     */
    public void reset() {
        okButton.setEnabled(true);
        if(key == null) {
            org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(swordfish.view.SwordfishApp.class).getContext().getResourceMap(KeyValidationDialog.class);
            keyTextField.setText(resourceMap.getString("keyTextField.text"));            
        } else {
            keyTextField.setText(key);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField keyTextField;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables

}
